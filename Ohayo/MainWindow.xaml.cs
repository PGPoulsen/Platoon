using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Collections.Specialized; using System.IO; using Path = System.IO.Path;  namespace Ohayo {     /// <summary>     /// Interaction logic for MainWindow.Xaml     /// </summary>     public partial class MainWindow : Window     {         private const string Xaml =             "<Style xmlns=\"http://schemas.microsoft.com/winfx/2006/Xaml/presentation\" TargetType=\"TextBlock\">" +             "   <Setter Property=\"TextWrapping\" Value=\"Wrap\"/>" +             "</Style>";         private readonly Style _textColumnStyle;          public MainWindow()         {          //   _textColumnStyle = System.Windows.Markup.XamlReader.Parse(Xaml) as Style;             InitializeComponent();         }          private void DataContextViewModel_LanguageChanged(object sender, LanguageChangeEventArgs e)         {             if (e.Change == LanguageChangeEventArgs.ChangeMode.Add)             {                 var bindString = string.Format("[{0}]", e.LanguageCode);                 var binding = new Binding(bindString);                 binding.Mode = BindingMode.OneWay;                 var column = new DataGridTextColumn                 {                     Header = e.LanguageCode,                     Binding = binding,                     ElementStyle = _textColumnStyle,                     Width = 300                 };                 LanguageGrid.Columns.Add(column);             }             if (e.Change == LanguageChangeEventArgs.ChangeMode.Remove)             {                 var column = LanguageGrid.Columns.Single(x => x.Header.Equals(e.LanguageCode));                 LanguageGrid.Columns.Remove(column);             }         }          private MainWindowViewModel DataContextViewModel => (MainWindowViewModel)DataContext;          public void AddDanish(object sender, RoutedEventArgs e)         {             DataContextViewModel.LanguageChanged += DataContextViewModel_LanguageChanged;             var result = DataContextViewModel.AddPoFile(                 @"C:\Git\accuratech\Office\Core\Locale\da-DK\LC_MESSAGES\ShopFloorManagementSuite.po");             if (!result)             {                 var window = Window.GetWindow(this);                 MessageBox.Show(window, "Language already added", "Failed to add language", MessageBoxButton.OK, MessageBoxImage.Error);             }             DataContextViewModel.LanguageChanged -= DataContextViewModel_LanguageChanged;              //var bindString = string.Format("LanguageToTranslationList[0][0]");         }         public void AddGerman(object sender, RoutedEventArgs e)         {             DataContextViewModel.LanguageChanged += DataContextViewModel_LanguageChanged;             var result = DataContextViewModel.AddPoFile(                 @"C:\Git\accuratech\Office\Core\Locale\de-DE\LC_MESSAGES\ShopFloorManagementSuite.po");             if (!result)             {                 var window = Window.GetWindow(this);                 MessageBox.Show(window, "Language already added", "Failed to add language", MessageBoxButton.OK, MessageBoxImage.Error);             }             DataContextViewModel.LanguageChanged -= DataContextViewModel_LanguageChanged;              //var bindString = string.Format("LanguageToTranslationList[0][0]");         }          private void RemoveLanguage(object sender, RoutedEventArgs e)         {             DataContextViewModel.LanguageChanged += DataContextViewModel_LanguageChanged;             var menuItem = (MenuItem)sender;             var languageToRemove = (string)menuItem.DataContext;             DataContextViewModel.RemovePoFile(languageToRemove);              DataContextViewModel.LanguageChanged -= DataContextViewModel_LanguageChanged;         }          private void ChangeContextId(object sender, RoutedEventArgs e)         {             throw new NotImplementedException();             var selectedContextId = DataContextViewModel.SelectedRow.Context;             var sources = DataContextViewModel.SelectedRow.SourceEntries;              foreach (var sourceEntry in sources)             {                 var sourceReferenceFilePath = sourceEntry.BasePath.ToString() + Path.DirectorySeparatorChar + sourceEntry.SourceReference.FilePath;                 var sourceFile = new System.IO.StreamReader(sourceReferenceFilePath);             }         }          private void ChangeMessageId(object sender, RoutedEventArgs e)         {             var selectedMessageId = DataContextViewModel.SelectedRow.MessageId;             var newMessageId = "newMessageId";             var sources = DataContextViewModel.SelectedRow.SourceEntries;              foreach (var sourceEntry in sources)             {                 var sourceReferenceFilePath = sourceEntry.BasePath.ToString() + Path.DirectorySeparatorChar + sourceEntry.SourceReference.FilePath;                 var lines =File.ReadAllLines(sourceReferenceFilePath);                 var line = lines[sourceEntry.SourceReference.Line-1];                 var newLine = line.Replace(selectedMessageId, newMessageId);                 lines[sourceEntry.SourceReference.Line - 1] = newLine;                 File.WriteAllLines(sourceReferenceFilePath, lines);             }         }     } } 